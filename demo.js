require("dotenv").config();
const axios = require("axios");
const dayjs = require("dayjs");
const fs = require("fs");

const { TRELLO_API_KEY, TRELLO_TOKEN, TRELLO_BOARD_ID } = process.env;

// Configuration
const DONE_LIST_NAMES = [/done/, /review/];

// Add your blacklist patterns here (case insensitive)
const BLACKLIST_PATTERNS = ["sprint"];

function isBlacklisted(cardName) {
  if (!cardName) return false;
  const lowerName = cardName.toLowerCase();
  return BLACKLIST_PATTERNS.some((pattern) =>
    lowerName.includes(pattern.toLowerCase())
  );
}

async function generateQuickReport() {
  console.log("üéØ Trello 30-Hour Activity Report - Quick Demo");
  console.log("=".repeat(60));

  try {
    // Get current user
    console.log("Fetching user information...");
    const userUrl = `https://api.trello.com/1/members/me?key=${TRELLO_API_KEY}&token=${TRELLO_TOKEN}`;
    const userResponse = await axios.get(userUrl);
    const currentUser = userResponse.data;

    console.log(` User: ${currentUser.fullName || currentUser.username}`);

    const baseFilename = `trello-summary-${dayjs().format("YYYY-MM-DD-HH")}`;
    const cacheFile = baseFilename + ".json";
    let lists, cards;
    // Try to load cache
    const exists = fs.existsSync(cacheFile);
    console.log(`Cache exists: ${exists}`);
    if (exists) {
      console.log(`Using cached Trello data: ${cacheFile}`);
      const cache = JSON.parse(fs.readFileSync(cacheFile, "utf8"));
      lists = cache.lists;
      cards = cache.cards;
    } else {
      // Get all lists from the board
      console.log("Fetching board lists...");
      const listsUrl = `https://api.trello.com/1/boards/${TRELLO_BOARD_ID}/lists`;
      const listsResponse = await axios.get(listsUrl, {
        params: {
          key: TRELLO_API_KEY,
          token: TRELLO_TOKEN,
          fields: "id,name,closed",
        },
      });
      lists = listsResponse.data.filter((list) => !list.closed);
      // Create a map of list IDs to their names
      const listMap = new Map(lists.map((list) => [list.id, list.name]));
      // Get cards with basic info
      console.log("Fetching cards...");
      const cardsUrl = `https://api.trello.com/1/boards/${TRELLO_BOARD_ID}/cards`;
      const cardsResponse = await axios.get(cardsUrl, {
        params: {
          key: TRELLO_API_KEY,
          token: TRELLO_TOKEN,
          fields: "id,name,shortUrl,dateLastActivity,idMembers,idList",
          members: true,
        },
      });
      // Add list name and status to each card
      cards = cardsResponse.data.map((card) => {
        const listName = listMap.get(card.idList) || "Unknown";
        const lowerListName = listName.toLowerCase();
        return {
          ...card,
          listName,
          isDone: DONE_LIST_NAMES.some((regex) => regex.test(lowerListName)),
        };
      });
      // Save cache
      fs.writeFileSync(cacheFile, JSON.stringify({ lists, cards }, null, 2));
      console.log(`Cached Trello data to: ${cacheFile}`);
    }
    // Create a map of list IDs to their names
    const listMap = new Map(lists.map((list) => [list.id, list.name]));
    console.log(` Found ${cards.length} total cards`);

    // Calculate 30 hours ago
    const thirtyHoursAgo = dayjs().subtract(30, "hours");

    // Find recent activity (excluding blacklisted cards)
    const recentCards = cards.filter((card) => {
      const lastActivity = dayjs(card.dateLastActivity);
      const isRecent = lastActivity.isAfter(thirtyHoursAgo);
      const isNotBlacklisted = !isBlacklisted(card.name);
      return isRecent && isNotBlacklisted;
    });

    // Get non-blacklisted cards assigned to you
    const myCards = recentCards.filter(
      (card) =>
        card.idMembers &&
        card.idMembers.includes(currentUser.id) &&
        !isBlacklisted(card.name)
    );

    // Log blacklisted cards for reference
    const blacklistedCards = cards.filter((card) => isBlacklisted(card.name));
    if (blacklistedCards.length > 0) {
      console.log(
        `\n‚ö†Ô∏è  Blacklisted ${blacklistedCards.length} cards based on name patterns`
      );
    }

    // Save summary with Markdown formatting
    const summaryBlock = `
${currentUser.fullName || currentUser.username}: update 8h | tracked ??
`;
    const ticketListBlock = myCards
      .map(
        (card, index) => `- [${card.name}](${card.shortUrl}) - ${card.listName}`
      )
      .join("\n");
    const report = `${summaryBlock}\n## tickets:\n${ticketListBlock}\n\n---\n_Report generated by Trello Activity Tracker_`;

    const filename = `trello-summary-${dayjs().format("YYYY-MM-DD-HH")}.md`;
    fs.writeFileSync(filename, report);
    console.log(`\nüìÑ Report saved: ${filename}`);

    console.log("\n‚úÖ Complete! Check the generated file for full details.");
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    if (error.response) {
      console.error("Status:", error.response.status);
    }
  }
}

generateQuickReport();
